import {EmojiKeyboard} from "./boards";
import {
	GreekBold,
	GreekBoldItalic,
	GreekItalic,
	GreekSansBold,
	GreekSansBoldItalic,
	LatinBold,
	LatinBoldItalic,
	LatinDoubleStruck,
	LatinFraktur,
	LatinFrakturBold,
	LatinItalic,
	LatinMono,
	LatinSans,
	LatinSansBold,
	LatinSansBoldItalic,
	LatinSansItalic,
	LatinScript,
	LatinScriptBold
} from "./mathLetters";

// Math symbols based on the unicode-math symbols list by Will Robertson, 2020/01/31 0.8q
// https://ctan.org/pkg/unicode-math
// UTN-28 is a Unicode Technical Note describing UnicodeMath as implemented in MS Office software
// https://www.unicode.org/notes/tn28/

const MathGroups = {
	name: "Math Groups",
	symbol: "‚ü®‚ü©",
	content: [
		// Opening and closing symbols
		"‚àö", // \sqrt(p)	radical
		"‚àõ", // \cuberoot	cube root
		"‚àú", // \fourthroot	fourth root
		[
			"‚Äñ", // \Vert(p)	double vertical bar
			"‚¶Ä", // \Vvert	triple vertical bar delimiter
		],

		[
			"‚åà", // \lceil(p)	left ceiling
			"‚åú", // \ulcorner	upper left corner
		],
		[
			"‚åâ", // \rceil(p)	right ceiling
			"‚åù", // \urcorner	upper right corner
		],
		[
			"‚åä", // \lfloor(p)	left floor
			"‚åû", // \llcorner	lower left corner
		],
		[
			"‚åã", // \rfloor(p)	right floor
			"‚åü", // \lrcorner	lower right corner
		],
		"‚é∞", // \lmoustache(p)	upper left or lower right curly bracket section
		"‚é±", // \rmoustache(p)	upper right or lower left curly bracket section
		"‚üÖ", // \lbag	left s-shaped bag delimiter
		"‚üÜ", // \rbag	right s-shaped bag delimiter
		[
			"‚ü®", // \langle(p)	mathematical left angle bracket
			"‚¶ë", // \langledot	left angle bracket with dot
		],
		[
			"‚ü©", // \rangle(p)	mathematical right angle bracket
			"‚¶í", // \rangledot	right angle bracket with dot
		],
		"‚ßº", // \lcurvyangle	left pointing curved angle bracket
		"‚ßΩ", // \rcurvyangle	right pointing curved angle bracket
		"‚ü™", // \lAngle	mathematical left double angle bracket
		"‚ü´", // \rAngle	mathematical right double angle bracket
		"‚üÆ", // \lgroup(p)	mathematical left flattened parenthesis
		"‚üØ", // \rgroup(p)	mathematical right flattened parenthesis
		"‚ù≤", // \lbrbrak	light left tortoise shell bracket ornament
		"‚ù≥", // \rbrbrak	light right tortoise shell bracket ornament
		"‚¶ó", // \lblkbrbrak	left black tortoise shell bracket
		"‚¶ò", // \rblkbrbrak	right black tortoise shell bracket
		"‚¶ã", // \lbrackubar	left square bracket with underbar
		"‚¶å", // \rbrackubar	right square bracket with underbar
		"‚¶ç", // \lbrackultick	left square bracket with tick in top corner
		"‚¶é", // \rbracklrtick	right square bracket with tick in bottom corner
		"‚¶è", // \lbracklltick	left square bracket with tick in bottom corner
		"‚¶ê", // \rbrackurtick	right square bracket with tick in top corner
		[
			"‚¶ì", // \lparenless	left arc less-than bracket
			"‚¶ï", // \Lparengtr	double left arc greater-than bracket
		],
		[
			"‚¶î", // \rparengtr	right arc greater-than bracket
			"‚¶ñ", // \Rparenless	double right arc less-than bracket
		],
		[
			"‚¶Ö", // \lParen	left white parenthesis
			"‚¶á", // \llparenthesis	z notation left image bracket
		],
		[
			"‚¶Ü", // \rParen	right white parenthesis
			"‚¶à", // \rrparenthesis	z notation right image bracket
		],
		[
			"‚ü¶", // \lBrack	mathematical left white square bracket
			"‚ü¨", // \Lbrbrak	mathematical left white tortoise shell bracket
		],
		[
			"‚üß", // \rBrack	mathematical right white square bracket
			"‚ü≠", // \Rbrbrak	mathematical right white tortoise shell bracket
		],
		"‚¶É", // \lBrace	left white curly bracket
		"‚¶Ñ", // \rBrace	right white curly bracket
		"‚¶â", // \llangle	z notation left binding bracket
		"‚¶ä", // \rrangle	z notation right binding bracket
		[
			"‚ßò", // \lvzigzag	left wiggly fence
			"‚ßö", // \Lvzigzag	left double wiggly fence
		], [
			"‚ßô", // \rvzigzag	right wiggly fence
			"‚ßõ", // \Rvzigzag	right double wiggly fence
		],
		"‚üå", // \longdivision	long division
	]
}
const MathAccents = {
	name: "Math Accents",
	symbol: "‚Éó",
	content: [
		"ÃÄ", // "‚óåÃÄ", \grave
		"ÃÅ", // "‚óåÃÅ", \acute
		"ÃÇ", // "‚óåÃÇ", \hat
		"ÃÉ", // "‚óåÃÉ", \tilde
		"\u0305", // \overbar
		"\u0304", // \bar
		"Ãø", // \Bar
		"Ãå", // "‚óåÃå", \check
		"ÃÜ", // "‚óåÃÜ", \breve
		"\u0310", // \candra	candrabindu (non-spacing)
		"\u0312", // \oturnedcomma	combining turned comma above
		"\u0315", // \ocommatopright	combining comma above right
		"\u031A", // \droang	left angle above (non-spacing)
		"Ãá", // "‚óåÃá", \dot
		"Ãà", // "‚óåÃà", \ddot
		"‚Éõ", // "‚óå‚Éõ", \dddot
		"\u20E8", // \threeunderdot combining triple underdot
		"‚Éú", // "‚óå‚Éú", \ddddot
		"\u0309", // \ovhook	combining hook above
		"\u030A", // \ocirc	ring
		"‚Éó", // "‚óå‚Éó", \vec
		"\u20D0", // \leftharpoonaccent	combining left harpoon above
		"‚Éë", // "‚óå‚Éë", \hvec
		"‚É°", // "‚óå‚É°", \tvec
		"\u20D2", // \vertoverlay combing long vertical line overlay
		"\u20E7", // \annuity, combining annuity symbol
		"\u20E9", // \widebridgeabove	combining wide bridge above
		"\u20F0", // \asteraccent	combining asterisk above
		"‚Ä≤", // \prime(p)	prime or minute, not superscripted
		"‚Ä≥", // \dprime	double prime or second, not superscripted
		"‚Ä¥", // \trprime	triple prime (not superscripted)
		"‚Åó", // \qprime	quadruple prime, not superscripted
		"‚Äµ", // \backprime(a)	reverse prime, not superscripted
		"‚Ä∂", // \backdprime	double reverse prime, not superscripted
		"‚Ä∑", // \backtrprime	triple reverse prime, not superscripted
	]
};
const MathOverUnder = {
	name: "Math Over Under",
	symbol: "‚èû",
	content: [
		"‚èû", // \overbrace
		"‚èü", // \underbrace
		"‚é¥", // \overbracket
		"‚éµ", // \underbracket
		"‚èú", // \overparen
		"‚èù", // \underparen
		"‚è†", // \overshell
		"‚è°", // \undershell
	]
};
const MathNAry = {
	name: "Math N-Ary",
	symbol: "‚àë",
	content: [
		"‚àë", // \sum
		{
			name: "More Sums",
			symbol: "‚ÖÄ",
			content: [
				"‚ÖÄ", // \Bbbsum	double-struck n-ary summation
				"‚®ä", // \modtwosum	modulo two sum
			]
		},
		"‚à´", // \int
		{
			name: "More Integrals",
			symbol: "‚à¨",
			content: [
				"‚à¨", // \iint
				"‚à≠", // \iiint
				"‚®å", // \iiiint	quadruple integral operator
				"‚àÆ", // \oint
				"‚àØ", // \oiint
				"‚à∞", // \oiiint
				"‚à±", // \intclockwise	clockwise integral
				"‚à≤", // \coint, \varointclockwise	contour integral, clockwise
				"‚à≥", // \aoint, \ointctrclockwise	contour integral, anticlockwise
				"‚®ç", // \intbar	finite part integral
				"‚®é", // \intBar	integral with double stroke
				"‚®è", // \fint	integral average with slash
				"‚®ê", // \cirfnint	circulation function
				"‚®ë", // \awint	anticlockwise integration
				"‚®í", // \rppolint	line integration with rectangular path around pole
				"‚®ì", // \scpolint	line integration with semicircular path around pole
				"‚®î", // \npolint	line integration not including the pole
				"‚®ï", // \pointint	integral around a point operator
				"‚®ñ", // \sqint	quaternion integral operator
				"‚®ó", // \intlarhk integral with leftwards arrow with hook
				"‚®ò", // \intx integral with times sign
				"‚®ô", // \intcap integral with intersection
				"‚®ö", // \intcup integral with union
				"‚®õ", // \upint integral with overbar
				"‚®ú", // \lowint integral with underbar
			]
		},
		"‚®ã", // \sumint	summation with integral
		"‚àè", // \prod
		"‚àê", // \amalg, \coprod
		[
			"‚ãÄ", // \bigwedge
			"‚®á", // \conjquant	two logical and operator
		],
		[
			"‚ãÅ", // \bigvee
			"‚®à", // \disjquant	two logical or operator
		],
		"‚ãÇ", // \bigcap
		"‚ãÉ", // \bigcup
		"‚®É", // \bigcupdot	n-ary union operator with dot
		"‚®Ñ", // \biguplus
		"‚®Ö", // \bigsqcap(p)	n-ary square intersection operator
		"‚®Ü", // \bigsqcup
		"‚®ù", // \Join join‚äç
		"‚üó", // \fullouterjoin	full outer join
		"‚üï", // \leftouterjoin	left outer join
		"‚üñ", // \rightouterjoin	right outer join
		"‚®û", // \bigtriangleleft large left triangle operator
		"‚üò", //\bigbot	large up tack
		"‚üô", //\bigtop	large down tack
		"‚ß∏", // \xsol	big solidus
		"‚ßπ", // \xbsol	big reverse solidus
		"‚®Ä", // \bigodot
		"‚®Å", // \bigoplus
		"‚®Ç", // \bigotimes
		"‚®â", // \bigtimes	n-ary times operator
		"‚®ü", // \zcmp z notation schema composition
		"‚®†", // \zpipe z notation schema piping
		"‚®°", // \zproject z notation schema projection
		"‚´º", // \biginterleave large triple vertical bar operator
		"‚´ø", // \bigtalloblong n-ary white vertical bar
		"ûª∞", // \arabicmaj arabic mathematical operator meem with hah with tatweel
		"ûª±", // \arabichad arabic mathematical operator hah with dal
	]
};
const MathBinary: EmojiKeyboard = {
	name: "Math Operators",
	symbol: "¬±",
	content: [
		{
			name: "Circled Operators",
			symbol: "‚äï",
			content: [
				"‚äï", // \oplus(p)	plus sign in circle
				"‚®≠", // \opluslhrim	plus sign in left half circle
				"‚®Æ", // \oplusrhrim	plus sign in right half circle

				"‚äñ", // \ominus(p)	minus sign in circle

				"‚äô", // \odot(p)	middle dot in circle

				"‚äó", // \otimes(p)	multiply sign in circle
				"‚®∂", // \otimeshat	circled multiplication sign with circumflex accent
				"‚®¥", // \otimeslhrim	multiplication sign in left half circle
				"‚®µ", // \otimesrhrim	multiplication sign in right half circle
				"‚®∑", // \Otimes	multiplication sign in double circle

				"‚®∏", // \odiv	circled division sign

				"‚äò", // \oslash(p)	solidus in circle
				"‚äõ", // \circledast(a)	asterisk in circle
				"‚äö", // \circledcirc(a)	small circle in circle

				"‚äú", // \circledequal	equal in circle
				"‚äù", // \circleddash(a)	hyphen in circle
				"‚¶µ", // \circlehbar	circle with horizontal bar
				"‚åΩ", // \obar	circle with vertical bar
				"‚¶∂", // \circledvert	circled vertical bar
				"‚¶∑", // \circledparallel	circled parallel
				"‚¶∏", // \obslash	circled reverse solidus
				"‚¶π", // \operp	circled perpendicular
				"‚ßÄ", // \olessthan	circled less-than
				"‚ßÅ", // \ogreaterthan	circled greater-than
				"‚¶ª", // \olcross	circle with superimposed x
				"‚¶º", // \odotslashdot	circled anticlockwise-rotated division sign
				"‚¶Ω", // \uparrowoncircle	up arrow through circle
				"‚¶æ", // \circledwhitebullet	circled white bullet
				"‚¶ø", // \circledbullet	circled bullet
			]
		},
		{
			name: "Boxed Operators",
			symbol: "‚äü",
			content: [
				"‚äû", // \boxplus(a)	plus sign in box
				"‚äü", // \boxminus(a)	minus sign in box
				"‚ä°", // \boxdot(a)	/dotsquare /boxdot b: small dot in box
				"‚ä†", // \boxtimes(a)	multiply sign in box
				"‚ßÑ", // \boxdiag	squared rising diagonal slash
				"‚ßÜ", // \boxast	squared asterisk
				"‚ßá", // \boxcircle	squared small circle
			]
		},
		{
			name: "Operators in Triangle",
			symbol: "‚®ª",
			content: [
				"‚®π", // \triangleplus	plus sign in triangle
				"‚®∫", // \triangleminus	minus sign in triangle
				"‚ó¨", // \trianglecdot	triangle with centered dot
				"‚®ª", // \triangletimes	multiplication sign in triangle
			]
		},
		{
			name: "Misc Arithmetic Operators",
			symbol: "‚ãá",
			content: [
				[
					"‚©≤", // \pluseqq	plus sign above equals sign
					"‚©±", // \eqqplus	equals sign above plus sign
				],

				"‚àî", // \dotplus(a)	plus sign, dot above
				"‚®¢", // \ringplus	plus sign with small circle above
				"‚®£", // \plushat	plus sign with circumflex accent above
				"‚®§", // \simplus	plus sign with tilde above
				"‚®•", // \plusdot	plus sign with dot below
				"‚®¶", // \plussim	plus sign with tilde below
				"‚®ß", // \plussubtwo	plus sign with subscript two
				"‚®®", // \plustrif	plus sign with black triangle
				"‚ß∫", // \doubleplus	double plus
				"‚ßª", // \tripleplus	triple plus
				"‚à∏", // \dotminus	minus sign, dot above
				"‚®©", // \commaminus	minus sign with comma above
				"‚®™", // \minusdot	minus sign with dot below
				"‚®´", // \minusfdots	minus sign with falling dots
				"‚®¨", // \minusrdots	minus sign with rising dots

				"‚ßæ", // \tplus	tiny
				"‚ßø", // \tminus	miny

				"‚ãâ", // \ltimes(a)	times sign, left closed
				"‚ãä", // \rtimes(a)	times sign, right closed
				"‚ãã", // \leftthreetimes(a)	left semidirect product
				"‚ãå", // \rightthreetimes(a)	right semidirect product
				"‚®∞", // \dottimes	multiplication sign with dot above
				"‚®±", // \timesbar	multiplication sign with underbar
				"‚®≤", // \btimes	semidirect product with bottom closed
				"‚®≥", // \smashtimes	smash product
				"‚ãá", // \divideontimes(a)	division on times

				"‚´Ω", // \sslash	double solidus operator
				"‚´ª", // \trslash	triple solidus binary relation
				"‚ß∂", // \dsol	solidus with overbar
			]
		},
		{
			name: "Misc Logic Operators",
			symbol: "‚©ö",
			content: [
				"‚üë", // \wedgedot	and with dot
				"‚ãè", // \curlywedge(a)	curly logical and
				"‚åÖ", // \varbarwedge	/barwedge b: logical and, bar above [projective (bar over small wedge)]
				"‚åÜ", // \vardoublebarwedge	/doublebarwedge b: logical and, double bar above [perspective (double bar over small wedge)]
				"‚©ë", // \wedgeodot	logical and with dot above
				"‚©ö", // \wedgemidvert	logical and with middle stem
				"‚©ú", // \midbarwedge	ogical and with horizontal dash
				"‚©û", // \doublebarwedge(a)	logical and with double overbar
				"‚©ü", // \wedgebar	logical and with underbar
				"‚©†", // \wedgedoublebar	logical and with double underbar

				"‚©ò", // \bigslopedwedge	sloping large and
				"‚©ì", // \Wedge	double logical and
				"‚©ï", // \wedgeonwedge	two intersecting logical and

				"‚äª", // \veebar(a)	logical or, bar below (large vee); exclusive disjunction
				"‚üá", // \veedot	or with dot inside
				"‚ãé", // \curlyvee(a)	curly logical or
				"‚©í", // \veeodot	logical or with dot above
				"‚©õ", // \veemidvert	logical or with middle stem
				"‚©ù", // \midbarvee	logical or with horizontal dash
				"‚©°", // \varveebar	small vee with underbar
				"‚©¢", // \doublebarvee	logical or with double overbar
				"‚©£", // \veedoublebar	logical or with double underbar

				"‚©ó", // \bigslopedvee	sloping large or
				"‚©î", // \Vee	double logical or
				"‚©ñ", // \veeonvee	two intersecting logical or
			]
		},
		{
			name: "Misc Set Operators",
			symbol: "‚©Ü",
			content: [
				"‚©Ä", // \capdot	intersection with dot
				"‚©É", // \barcap	intersection with overbar
				"‚©Ñ", // \capwedge	intersection with logical and
				"‚©ã", // \twocaps	intersection beside and joined with intersection
				"‚©ç", // \closedvarcap	closed intersection with serifs

				"‚ãí", // \Cap(a)	/cap /doublecap b: double intersection

				"‚äå", // \cupleftarrow	multiset
				"‚©Å", // \uminus	union with minus sign
				"‚©Ç", // \barcup	union with overbar
				"‚©Ö", // \cupvee	union with logical or
				"‚©ä", // \twocups	union beside and joined with union
				"‚©å", // \closedvarcup	closed union with serifs
				"‚©ê", // \closedvarcupsmashprod	closed union with serifs and smash product

				"‚ãì", // \Cup(a)	/cup /doublecup b: double union

				"‚©Ü", // \cupovercap	union above intersection
				"‚©à", // \cupbarcap	union above bar above intersection

				"‚©á", // \capovercup	intersection above union
				"‚©â", // \capbarcup	intersection above bar above union
			]
		},
		// Binary relations
		[
			"¬±", // \pm(p)	plus-or-minus sign
			"‚àì", // \mp(p)	minus-or-plus sign
		],
		"+", // \mathplus	plus sign b:
		"‚àí", // \minus	minus sign
		"‚ãÖ", // \cdot(p)	small middle dot
		"‚ãÜ", // \star(p)	small star, filled, low
		"‚àô", // \vysmblkcircle	bullet operator
		[
			"√ó", // \times(p)	multiply sign
			"‚®Ø", // \vectimes	vector or cross product
		],
		[
			"√∑", // \div(p)	divide sign
		],
		"‚àï", // \divslash	division slash
		"‚ÅÑ", // \fracslash	fraction slash
		[
			"‚ßµ", // \setminus(p)	reverse solidus operator
			"‚ß∑", // \rsolbar	reverse solidus with horizontal stroke
		],
		"‚àñ", // \smallsetminus(a)	small set minus (cf. reverse solidus)
		"‚àó", // \ast(p)	centered asterisk
		"‚àò", // \vysmwhtcircle	composite function (small circle)
		[
			"‚àß", // \wedge(p)	/wedge /land b: logical and
			"‚äº", // \barwedge(a)	bar, wedge (large wedge)
		],
		[
			"‚à®", // \vee(p)	/vee /lor b: logical or
			"‚äΩ", // \barvee	bar, vee (large vee)
		],
		"‚à©", // \cap(p)	intersection
		"‚à™", // \cup(p)	union or logical sum
		"‚äç", // \cupdot	union, with dot
		"‚äé", // \uplus(p)	plus sign in union
		[
			"‚äì", // \sqcap(p)	square intersection
			"‚©é", // \Sqcap	double square intersection
		],
		[
			"‚äî", // \sqcup(p)	square union
			"‚©è", // \Sqcup	double square union
		],

		[
			"‚Ä†", // \dagger(p)	dagger relation
			"‚Ä°", // \ddagger(p)	double dagger relation
		],
		"‚ÅÄ", // \tieconcat	character tie, z notation sequence concatenation

		"‚àæ", // \invlazys	most positive [inverted lazy s]
		"‚âÄ", // \wr(p)	wreath product
		"‚Öã", // \upand	turned ampersand
		"‚ä∫", // \intercal(a)	intercal
		[
			"‚ßñ", // \hourglass	white hourglass
			"‚ßó", // \blackhourglass	black hourglass
		],
		"‚ß¢", // \shuffle	shuffle product
		"‚®æ", // \fcmp	z notation relational composition
		"‚®ø", // \amalg(p)	amalgamation or coproduct
		[
			"‚´¥", // \interleave	triple vertical bar binary relation
			"‚´µ", // \nhVvert	triple vertical bar with horizontal stroke
		],
		"‚´∂", // \threedotcolon	triple colon operator
		"‚´æ", // \talloblong	white vertical bar
		"‚®º", // \intprod	interior product
		"‚®Ω", // \intprodr	righthand interior product
	]
}
const MathSymbols: EmojiKeyboard = {
	name: "Math Symbols",
	symbol: "‚àû",
	content: [
// Ordinary symbols, \mathord
		"¬ß", // \mathsection	section symbol
		[
			"¬¨", // \neg(p)	/neg /lnot not sign
			"‚åê", // \invnot	reverse not
		],
		"¬∂", // \mathparagraph	paragraph symbol
		"∆µ", // \Zbar	impedance (latin capital letter z with stroke)
		"œ∂", // \upbackepsilon	greek reversed lunate epsilon symbol
		"‚Äï", // \horizbar	horizontal bar
		"‚Äó", // \twolowline	double low line (spacing)
		"‚Ä•", // \enleadertwodots	double baseline dot (en leader)
		"‚Ä¶", // \unicodeellipsis	ellipsis (horizontal)
		"‚Ä∏", // \caretinsert	caret (insertion mark)
		"‚Äº", // \Exclam	double exclamation mark
		"‚ÅÉ", // \hyphenbullet	rectangle, filled (hyphen bullet)
		"‚Åá", // \Question	double question mark

		"‚Ñá", // \Eulerconst	euler constant
		"‚Ñé", // \Planckconst	planck constant
		"‚Ñß", // \mho	conductance
		"‚Ñ≤", // \Finv(a)	turned capital f
		"‚Ñº", // \Bbbpi	double-struck small pi
		"‚ÖÅ", // \Game(a)	turned sans-serif capital g
		"‚ÖÇ", // \sansLturned	turned sans-serif capital l
		"‚ÖÉ", // \sansLmirrored	reversed sans-serif capital l
		"‚ÖÑ", // \Yup	turned sans-serif capital y

		"‚Öä", // \PropertyLine	property line
		"‚àÄ", // \forall(p)	for all
		"‚àÅ", // \complement(a)	complement sign
		[
			"‚àÉ", // \exists(p)	at least one exists
			"‚àÑ", // \nexists(a)	negated exists
		],
		"‚Ñµ",
		"‚Ñ∂",
		"‚àÖ",
		{
			name: "Var Empty Set",
			symbol: "‚¶≥",
			content: [
				"‚åÄ",
				"‚¶∞",
				"‚¶±",
				"‚¶≤",
				"‚¶≥",
				"‚¶¥",
			],
		},
		"‚àÜ", // \increment	laplacian (delta; nabla^2)
		"‚àé", // \QED	end of proof
		"‚àû",
		{
			name: "Var Infinity",
			symbol: "‚ßû",
			content: [
				"‚ßú",
				"‚ßù",
				"‚ßû",
				"‚ôæ",
			],
		},
		{
			name: "Angle Symbols",
			symbol: "‚à°",
			content: [
				"‚à†", // \angle(p)	angle
				"‚àü", // \rightangle	right (90 degree) angle
				"‚à°", // \measuredangle(a)	angle-measured
				"‚à¢", // \sphericalangle(a)	angle-spherical
				"‚äæ", // \measuredrightangle	right angle-measured [with arc]
				"‚üÄ", // \threedangle	three dimensional angle
				"‚¶õ", // \measuredangleleft	measured angle opening left
				"‚¶ú", // \rightanglesqr	right angle variant with square
				"‚¶ù", // \rightanglemdot	measured right angle with dot
				"‚¶û", // \angles	angle with s inside
				"‚¶ü", // \angdnr	acute angle
				"‚¶†", // \gtlpar	spherical angle opening left
				"‚¶°", // \sphericalangleup	spherical angle opening up
				"‚¶¢", // \turnangle	turned angle
				"‚¶£", // \revangle	reversed angle
				"‚¶§", // \angleubar	angle with underbar
				"‚¶•", // \revangleubar	reversed angle with underbar
				"‚¶¶", // \wideangledown	oblique angle opening up
				"‚¶ß", // \wideangleup	oblique angle opening down
				"‚¶®", // \measanglerutone	measured angle with open arm ending in arrow pointing up and right
				"‚¶©", // \measanglelutonw	measured angle with open arm ending in arrow pointing up and left
				"‚¶™", // \measanglerdtose	measured angle with open arm ending in arrow pointing down and right
				"‚¶´", // \measangleldtosw	measured angle with open arm ending in arrow pointing down and left
				"‚¶¨", // \measangleurtone	measured angle with open arm ending in arrow pointing right and up
				"‚¶≠", // \measangleultonw	measured angle with open arm ending in arrow pointing left and up
				"‚¶Æ", // \measangledrtose	measured angle with open arm ending in arrow pointing right and down
				"‚¶Ø", // \measangledltosw	measured angle with open arm ending in arrow pointing left and down
			]
		},
		"‚à¥", // \therefore(a)	therefore
		"‚àµ", // \because(a)	because
		[
			"‚àø", // \sinewave	sine wave
			"‚è¶", // \accurrent	ac current
		],
		"‚ä§", // \top(p)	top
		"‚ä•", // \bot(p)	bottom
		"‚äπ", // \hermitmatrix	hermitian conjugate matrix
		"‚ãØ", // \unicodecdots	three dots, centered
		"‚åÇ", // \house	house
		"‚åí", // \profline	profile of a line
		"‚åì", // \profsurf	profile of a surface
		"‚åó", // \viewdata	viewdata square
		"‚åô", // \turnednot	turned not sign
		"‚å≤", // \conictaper	conical taper
		"‚å∂", // \topbot	top and bottom
		"‚çÄ", // \APLnotbackslash	apl functional symbol backslash bar
		"‚çº", // \rangledownzigzagarrow	right angle with downwards zigzag arrow
		"‚éØ", // \harrowextender	horizontal line extension (used to extend arrows)
		"‚é∂", // \bbrktbrk	bottom square bracket over top square bracket
		"‚é∏", // \lvboxline	left vertical box line
		"‚éπ", // \rvboxline	right vertical box line
		"‚è§", // \strns	straightness
		"‚èß", // \elinters	electrical intersection
		"‚ê¢", // \blanksymbol	blank symbol
		"‚ê£", // \mathvisiblespace	open box
		"‚îÜ", // \bdtriplevdash	doubly broken vert
		"‚ñÄ",
		"‚ñÑ",
		"‚ñà",
		"‚ñå",
		"‚ñê",
		"‚ñë",
		"‚ñí",
		"‚ñì",
	]
};
const MathShapes: EmojiKeyboard = {
	name: "Math Shapes",
	symbol: "‚è¢",
	content: [
		"‚óã", // \mdlgwhtcircle	medium large circle

		"‚öÜ", // \circledrightdot	white circle with dot right
		"‚öà", // \blackcircledrightdot	black circle with white dot right
		"‚öá", // \circledtwodots	white circle with two dots
		"‚öâ", // \blackcircledtwodots	black circle with two white dots
		"‚ßÇ", // \cirscir	circle with small circle to the right
		"‚ßÉ", // \cirE	circle with two horizontal strokes to the right
		[
			"‚ß¨", // \circledownarrow	white circle with down arrow
			"‚ß≠", // \blackcircledownarrow	black circle with down arrow
		], [
			"‚ß≤", // \errbarcircle	error-barred white circle
			"‚ß≥", // \errbarblackcircle	error-barred black circle
		],

		"‚Éù", // \enclosecircle	combining enclosing circle

		"‚óç", // \circlevertfill	circle with vertical fill
		"‚óé", // \bullseye	bullseye
		"‚óè", // \mdlgblkcircle	circle, filled
		"‚óê", // \circlelefthalfblack	circle, filled left half [harvey ball]
		"‚óë", // \circlerighthalfblack	circle, filled right half
		"‚óí", // \circlebottomhalfblack	circle, filled bottom half
		"‚óì", // \circletophalfblack	circle, filled top half
		"‚óî", // \circleurquadblack	circle with upper right quadrant black
		"‚óï", // \blackcircleulquadwhite	circle with all but upper left quadrant black
		"‚óñ", // \blacklefthalfcircle	left half black circle
		"‚óó", // \blackrighthalfcircle	right half black circle
		"‚ó¥", // \circleulquad	white circle with upper left quadrant
		"‚óµ", // \circlellquad	white circle with lower left quadrant
		"‚ó∂", // \circlelrquad	white circle with lower right quadrant
		"‚ó∑", // \circleurquad	white circle with upper right quadrant
		"‚óå", // \dottedcircle	dotted circle

		"‚ó¶", // \smwhtcircle	white bullet
		"‚ö¨", // \mdsmwhtcircle	medium small white circle
		"‚¶Å", // \mdsmblkcircle	z notation spot
		[
			"‚ö™", // \mdwhtcircle	medium white circle
			"‚ö´", // \mdblkcircle	medium black circle
		], [
			"‚óØ", // \lgwhtcircle	large circle
			"‚¨§", // \lgblkcircle	black large circle
		],

		"‚ó†", // \topsemicircle	upper half circle
		"‚ó°", // \botsemicircle	lower half circle

		"‚óô", // \inversewhitecircle	inverse white circle
		"‚óö", // \invwhiteupperhalfcircle	upper half inverse white circle
		"‚óõ", // \invwhitelowerhalfcircle	lower half inverse white circle

		[
			"‚¨≠", // \whthorzoval	white horizontal ellipse
			"‚¨¨", // \blkhorzoval	black horizontal ellipse
		], [
			"‚¨Ø", // \whtvertoval	white vertical ellipse
			"‚¨Æ", // \blkvertoval	black vertical ellipse
		], [
			"‚ñ≥", // \bigtriangleup(p)	big up triangle, open
			"‚ñ≤", // \bigblacktriangleup	black up-pointing triangle
		],

		"‚üÅ", // \whiteinwhitetriangle	white triangle containing small white triangle
		"‚ßä", // \triangleodot	triangle with dot above
		"‚ßã", // \triangleubar	triangle with underbar
		"‚ßå", // \triangles	s in triangle

		"‚ó≠", // \triangleleftblack	up-pointing triangle with left half black
		"‚óÆ", // \trianglerightblack	up-pointing triangle with right half black
		"‚ñ¥", // \blacktriangle(a)	up triangle, filled

		"‚ßç", // \triangleserifs	triangle with serifs at bottom

		"‚É§", // \enclosetriangle	combining enclosing upward pointing triangle

		[
			"‚ñΩ", // \bigtriangledown(p)	big down triangle, open
			"‚ñº", // \bigblacktriangledown	big down triangle, filled
		],

		"‚ß®", // \downtriangleleftblack	down-pointing triangle with left half black
		"‚ß©", // \downtrianglerightblack	down-pointing triangle with right half

		[
			"‚ñø", // \triangledown(a)	down triangle, open
			"‚ñæ", // \blacktriangledown(a)	down triangle, filled
		],
		[
			"‚óÅ", // \triangleleft(p)	(large) left triangle, open; z notation domain restriction
			"‚óÄ", // \blacktriangleleft(a)	(large) left triangle, filled
		],
		"‚©§", // \dsub	z notation domain antirestriction
		[
			"‚ñ∑", // \triangleright(p)	(large) right triangle, open; z notation range restriction
			"‚ñ∂", // \blacktriangleright(a)	(large) right triangle, filled
		],
		"‚©•", // \rsub	z notation range antirestriction

		"‚äø", // \varlrtriangle	right triangle
		[
			"‚óø", // \lrtriangle	lower right triangle
			"‚ó¢", // \lrblacktriangle	lower right triangle, filled
		], [
			"‚ó∫", // \lltriangle	lower left triangle
			"‚ó£", // \llblacktriangle	lower left triangle, filled
		], [
			"‚ó∏", // \ultriangle	upper left triangle
			"‚ó§", // \ulblacktriangle	upper left triangle, filled
		], [
			"‚óπ", // \urtriangle	upper right triangle
			"‚ó•", // \urblacktriangle	upper right triangle, filled
		],

		[
			"‚óª", // \mdwhtsquare	white medium square
			"‚óº", // \mdblksquare	black medium square
		], [
			"‚ñ°", // \mdlgwhtsquare	square, open
			"‚ñ†", // \mdlgblksquare	square, filled
		],
		"‚ü§", // \whitesquaretickleft	white square with leftwards tick
		"‚ü•", // \whitesquaretickright	white square with rightwards tick
		"‚ßÖ", // \boxbslash	squared falling diagonal slash
		"‚ßà", // \boxbox	squared square
		"‚ó´", // \boxbar	vertical bar in box

		"‚Éû", // \enclosesquare	combining enclosing square

		"‚ñ¢", // \squoval	white square with rounded corners
		"‚ñ£", // \blackinwhitesquare	white square containing black small square
		"‚ñ§", // \squarehfill	square, horizontal rule filled
		"‚ñ•", // \squarevfill	square, vertical rule filled
		"‚ñ¶", // \squarehvfill	square with orthogonal crosshatch fill
		"‚ñß", // \squarenwsefill	square, nw-to-se rule filled
		"‚ñ®", // \squareneswfill	square, ne-to-sw rule filled
		"‚ñ©", // \squarecrossfill	square with diagonal crosshatch fill
		"‚óß", // \squareleftblack	square, filled left half
		"‚ó®", // \squarerightblack	square, filled right half
		"‚ó©", // \squareulblack	square, filled top left corner
		"‚ó™", // \squarelrblack	square, filled bottom right corner
		"‚¨í", // \squaretopblack	square with top half black
		"‚¨ì", // \squarebotblack	square with bottom half black
		"‚¨î", // \squareurblack	square with upper right diagonal half black
		"‚¨ï", // \squarellblack	square with lower left diagonal half black
		"‚ó∞", // \squareulquad	white square with upper left quadrant
		"‚ó±", // \squarellquad	white square with lower left quadrant
		"‚ó≤", // \squarelrquad	white square with lower right quadrant
		"‚ó≥", // \squareurquad	white square with upper right quadrant
		"‚¨ö", // \dottedsquare	dotted square

		[
			"‚¨û", // \vysmwhtsquare	white very small square
			"‚¨ù", // \vysmblksquare	black very small square
		], [
			"‚ñ´", // \smwhtsquare	white small square
			"‚ñ™", // \smblksquare	/blacksquare - sq bullet, filled
		], [
			"‚óΩ", // \mdsmwhtsquare	white medium small square
			"‚óæ", // \mdsmblksquare	black medium small square
		], [
			"‚¨ú", // \lgwhtsquare	white large square
			"‚¨õ", // \lgblksquare	black large square
		], [
			"‚ñØ", // \vrectangle	rectangle, white (vertical)
			"‚ñÆ", // \vrectangleblack	black vertical rectangle
		], [
			"‚ñ≠", // \hrectangle	horizontal rectangle, open
			"‚ñ¨", // \hrectangleblack	black rectangle
		], [
			"‚ñ±", // \parallelogram	parallelogram, open
			"‚ñ∞", // \parallelogramblack	black parallelogram
		],
		"‚è¢", // \trapezium	white trapezium
		"‚è•", // \fltns	flatness

		"‚çì", // \APLboxupcaret	boxed up caret
		"‚ç∞", // \APLboxquestion	boxed question mark

		"‚üê", // \diamondcdot	white diamond with centred dot
		"‚ü†", // \lozengeminus	lozenge divided by horizontal rule

		"‚ü°", // \concavediamond	white concave-sided diamond
		"‚ü¢", // \concavediamondtickleft	white concave-sided diamond with leftwards tick
		"‚ü£", // \concavediamondtickright	white concave-sided diamond with rightwards tick
		"‚ß™", // \blackdiamonddownarrow	black diamond with down arrow
		[
			"‚ß∞", // \errbardiamond	error-barred white diamond
			"‚ß±", // \errbarblackdiamond	error-barred black diamond
		],


		"‚åë", // \sqlozenge	square lozenge
		"‚ãÑ", // \smwhtdiamond	white diamond
		"‚¨©", // \smblkdiamond	black small diamond
		[
			"‚¨´", // \smwhtlozenge	white small lozenge
			"‚¨™", // \smblklozenge	black small lozenge
		], [
			"‚¨¶", // \mdwhtdiamond	white medium diamond
			"‚¨•", // \mdblkdiamond	black medium
		], [
			"‚óá", // \mdlgwhtdiamond	white diamond; diamond, open
			"‚óÜ", // \mdlgblkdiamond	black diamond
		], [
			"‚¨®", // \mdwhtlozenge	white medium lozenge
			"‚¨ß", // \mdblklozenge	black medium lozenge
		],
		"‚óà", // \blackinwhitediamond	white diamond containing black small diamond
		"‚¨ñ", // \diamondleftblack	diamond with left half black
		"‚¨ó", // \diamondrightblack	diamond with right half black
		"‚¨ò", // \diamondtopblack	diamond with top half black
		"‚¨ô", // \diamondbotblack	diamond with bottom half black

		"‚Éü", // \enclosediamond	combining enclosing diamond

		[
			"‚óä", // \mdlgwhtlozenge	lozenge or total mark
			"‚ß´", // \mdlgblklozenge	black lozenge
		], [
			"‚¨†", // \pentagon	white pentagon
			"‚¨ü", // \pentagonblack	black pentagon
		], [
			"‚≠î", // \rightpentagon	white right-pointing pentagon
			"‚≠ì", // \rightpentagonblack	black right-pointing pentagon
		], [
			"‚éî", // \hexagon	horizontal benzene ring [hexagon flat open]
			"‚¨£", // \hexagonblack	horizontal black hexagon
		], [
			"‚¨°", // \varhexagon	white hexagon
			"‚¨¢", // \varhexagonblack	black hexagon
		],
		"‚å¨", // \varhexagonlrbonds	six carbon ring, corner down, double bonds lower right etc
		"‚è£", // \benzenr	benzene ring with circle
	]
}
const MathRelations: EmojiKeyboard = {
	name: "Math Relations",
	symbol: "‚â§",
	content: [
		{
			name: "Misc Compare",
			symbol: "‚©ª",
			content: [
				"‚ãñ", // \lessdot(a)	less than, with dot
				"‚ãó", // \gtrdot(a)	greater than, with dot
				"‚©π", // \ltcir	less-than with circle inside
				"‚©∫", // \gtcir	greater-than with circle inside
				"‚©ª", // \ltquest	less-than with question mark above
				"‚©º", // \gtquest	greater-than with question mark above

				"‚™á", // \lneq(a)	less-than and single-line not equal to
				"‚™à", // \gneq(a)	greater-than and single-line not equal to
				[
					"‚â¶", // \leqq(a)	less, double equals
					"‚â®", // \lneqq(a)	less, not double equals
				], [
					"‚âß", // \geqq(a)	greater, double equals
					"‚â©", // \gneqq(a)	greater, not double equals
				],

				"‚ãú", // \eqless	equal-or-less
				"‚ãù", // \eqgtr	equal-or-greater
				"‚™ô", // \eqqless	double-line equal to or less-than
				"‚™ö", // \eqqgtr	double-line equal to or greater-than

				"‚©Ω", // \leqslant(a)	less-than or slanted equal to
				"‚©æ", // \geqslant(a)	greater-than or slanted equal to
				"‚©ø", // \lesdot	less-than or slanted equal to with dot inside
				"‚™Ä", // \gesdot	greater-than or slanted equal to with dot inside
				"‚™Å", // \lesdoto	less-than or slanted equal to with dot above
				"‚™Ç", // \gesdoto	greater-than or slanted equal to with dot above
				"‚™É", // \lesdotor	less-than or slanted equal to with dot above right
				"‚™Ñ", // \gesdotol	greater-than or slanted equal to with dot above left

				"‚™ï", // \eqslantless(a)	slanted equal to or less-than
				"‚™ñ", // \eqslantgtr(a)	slanted equal to or greater-than
				"‚™ó", // \elsdot	slanted equal to or less-than with dot inside
				"‚™ò", // \egsdot	slanted equal to or greater-than with dot inside

				"‚´π", // \leqqslant	double-line slanted less-than or equal to
				"‚´∫", // \geqqslant	double-line slanted greater-than or equal to
				"‚™õ", // \eqqslantless	double-line slanted equal to or lessthan
				"‚™ú", // \eqqslantgtr	double-line slanted equal to or greater-than

				[
					"‚â≤", // \lesssim(a)	less, similar
					"‚â¥", // \nlesssim	not less, similar
				], [
					"‚â≥", // \gtrsim(a)	greater, similar
					"‚âµ", // \ngtrsim	not greater, similar
				],
				"‚ã¶", // \lnsim(a)	less, not similar
				"‚ãß", // \gnsim(a)	greater, not similar
				[
					"‚™Ö", // \lessapprox(a)	less-than or approximate
					"‚™â", // \lnapprox(a)	less-than and not approximate
				], [
					"‚™Ü", // \gtrapprox(a)	greater-than or approximate
					"‚™ä", // \gnapprox(a)	greater-than and not approximate
				],
				"‚™ç", // \lsime	less-than above similar or equal
				"‚™é", // \gsime	greater-than above similar or equal

				"‚™ù", // \simless	similar or less-than
				"‚™û", // \simgtr	similar or greater-than
				"‚™ü", // \simlE	similar above less-than above equals sign
				"‚™†", // \simgE	similar above greater-than above equals sign

				"‚™£", // \partialmeetcontraction	double less-than with underbar

				[
					"‚ãò", // \lll(a)	/ll /lll /llless r: triple less-than
					"‚´∑", // \lllnest	stacked very much less-than
				], [
					"‚ãô", // \ggg(a)	/ggg /gg /gggtr r: triple greaterthan
					"‚´∏", // \gggnest	stacked very much greater-than
				],

				[
					"‚â∑", // \gtrless(a)	greater, less
					"‚âπ", // \ngtrless	not greater, less
				],
				"‚ãö", // \lesseqgtr(a)	less, equals, greater
				"‚ãõ", // \gtreqless(a)	greater, equals, less
				"‚™ã", // \lesseqqgtr(a)	less-than above double-line equal above greater-than
				"‚™å", // \gtreqqless(a)	greater-than above double-line equal above less-than
				"‚™è", // \lsimg	less-than above similar above greater-than
				"‚™ê", // \gsiml	greater-than above similar above less-than
				"‚™ë", // \lgE	less-than above greater-than above double-line equal
				"‚™í", // \glE	greater-than above less-than above double-line equal
				"‚™ì", // \lesges	less-than above slanted equal above greater-than above slanted equal
				"‚™î", // \gesles	greater-than above slanted equal above less-than above slanted equal

				"‚™§", // \glj	greater-than overlapping less-than
				"‚™•", // \gla	greater-than beside less-than

				"‚™™", // \smt	smaller than
				"‚™´", // \lat	larger than
				"‚™¨", // \smte	smaller than or equal to
				"‚™≠", // \late	larger than or equal to
			]
		},
		{
			name: "Misc Order",
			symbol: "‚âæ",
			content: [
				"‚ãû", // \curlyeqprec(a)	curly equals, precedes
				"‚ãü", // \curlyeqsucc(a)	curly equals, succeeds

				[
					"‚™Ø", // \preceq(p)	precedes above single-line equals sign
					"‚™±", // \precneq	precedes above single-line not equal to
				], [
					"‚™∞", // \succeq(p)	succeeds above single-line equals sign
					"‚™≤", // \succneq	succeeds above single-line not equal to
				],

				[
					"‚™≥", // \preceqq	precedes above equals sign
					"‚™µ", // \precneqq(a)	precedes above not equal to
				], [
					"‚™¥", // \succeqq	succeeds above equals sign
					"‚™∂", // \succneqq(a)	succeeds above not equal to
				],
				[
					"‚âæ", // \precsim(a)	precedes, similar
					"‚ã®", // \precnsim(a)	precedes, not similar
				], [
					"‚âø", // \succsim(a)	succeeds, similar
					"‚ã©", // \succnsim(a)	succeeds, not similar
				],
				[
					"‚™∑", // \precapprox(a)	precedes above almost equal to
					"‚™π", // \precnapprox(a)	precedes above not almost equal to
				], [
					"‚™∏", // \succapprox(a)	succeeds above almost equal to
					"‚™∫", // \succnapprox(a)	succeeds above not almost equal to
				],

				"‚™ª", // \Prec	double precedes
				"‚™º", // \Succ	double succeeds
				"‚ä∞", // \prurel	element precedes under relation
				"‚ä±", // \scurel	succeeds under relation
				"‚•Ω", // \rightfishtail	right fish tail
				"‚•º", // \leftfishtail	left fish tail
			]
		},
		{
			name: "Misc Member",
			symbol: "‚ãª",
			content: [
				"‚àä", // \smallin	set membership (small set membership)
				"‚àç", // \smallni	/ni /owns r: contains (small contains as member)

				"‚ã≤", // \disin	element of with long horizontal stroke
				"‚ã∫", // \nisd	contains with long horizontal stroke

				"‚ã≥", // \varisins	element of with vertical bar at end of horizontal stroke
				"‚ãª", // \varnis	contains with vertical bar at end of horizontal stroke

				"‚ã¥", // \isins	small element of with vertical bar at end of horizontal stroke
				"‚ãº", // \nis	small contains with vertical bar at end of horizontal stroke

				"‚ãµ", // \isindot	element of with dot above

				"‚ã∂", // \varisinobar	element of with overbar
				"‚ãΩ", // \varniobar	contains with overbar

				"‚ã∑", // \isinobar	small element of with overbar
				"‚ãæ", // \niobar	small contains with overbar

				"‚ã∏", // \isinvb	element of with underbar
				"‚ãπ", // \isinE	element of with two horizontal strokes

				"‚üí", // \upin	element of opening upwards

				"‚´ô", // \forkv	element of opening downwards
				"‚ãî", // \pitchfork(a)	pitchfork
				"‚´ö", // \topfork	pitchfork with tee top
				"‚´õ", // \mlcp	transversal intersection
				[
					"‚´ú", // \forks	forking
					"‚´ù", // \forksnot	nonforking
				],

				"‚ãø", // \bagmember	z notation bag membership
			]
		},
		{
			name: "Misc Subset",
			symbol: "‚´É",
			content: [
				"‚™Ω", // \subsetdot	subset with dot
				"‚™æ", // \supsetdot	superset with dot

				"‚™ø", // \subsetplus	subset with plus sign below
				"‚´Ä", // \supsetplus	superset with plus sign below

				"‚´Å", // \submult	subset with multiplication sign below
				"‚´Ç", // \supmult	superset with multiplication sign below

				"‚üà", // \bsolhsub	reverse solidus preceding subset
				"‚üâ", // \suphsol	superset preceding solidus

				"‚üÉ", // \subsetcirc	open subset
				"‚üÑ", // \supsetcirc	open superset

				"‚ãê", // \Subset(a)	double subset
				"‚ãë", // \Supset(a)	double superset

				"‚´è", // \csub	closed subset
				"‚´ê", // \csup	closed superset

				// SUBSET EQUAL

				"‚ää", // \subsetneq(a)	subset, not equals
				"‚äã", // \supsetneq(a)	superset, not equals

				"‚´É", // \subedot	subset of or equal to with dot above
				"‚´Ñ", // \supedot	superset of or equal to with dot above

				"‚´ë", // \csube	closed subset or equal to
				"‚´í", // \csupe	closed superset or equal to

				"‚´Ö", // \subseteqq(a)	subset of above equals sign
				"‚´Ü", // \supseteqq(a)	superset of above equals sign

				"‚´á", // \subsim	subset of above tilde operator
				"‚´à", // \supsim	superset of above tilde operator

				"‚´â", // \subsetapprox	subset of above almost equal to
				"‚´ä", // \supsetapprox	superset of above almost equal to

				"‚´ã", // \subsetneqq(a)	subset of above not equal to
				"‚´å", // \supsetneqq(a)	superset of above not equal to

				// TWO SYMBOLS

				"‚´ì", // \subsup	subset above superset
				"‚´î", // \supsub	superset above subset
				"‚´ï", // \subsub	subset above subset
				"‚´ñ", // \supsup	superset above superset
				"‚´ó", // \suphsub	superset beside subset
				"‚´ò", // \supdsub	superset beside and joined by dash with subset

				// SQUARE SUBSET

				"‚äè", // \sqsubset	square subset
				"‚äê", // \sqsupset	square superset
				"‚´ç", // \lsqhook	square left open box operator
				"‚´é", // \rsqhook	square right open box operator

				[
					"‚äë", // \sqsubseteq(p)	square subset, equals
					"‚ã¢", // \nsqsubseteq	not, square subset, equals
				], [
					"‚äí", // \sqsupseteq(p)	square superset, equals
					"‚ã£", // \nsqsupseteq	not, square superset, equals
				],
				"‚ã§", // \sqsubsetneq	square subset, not equals
				"‚ã•", // \sqsupsetneq	square superset, not equals

			],
		},
		{
			name: "Misc Equals",
			symbol: "‚âõ",
			content: [
				"‚©µ", // \eqeq	two consecutive equals signs
				"‚©∂", // \eqeqeq	three consecutive equals signs
				"‚ß¶", // \gleichstark	gleich stark

				"‚âñ", // \eqcirc(a)	circle on equals sign
				"‚âù", // \eqdef	equals by definition
				"‚âü", // \questeq	equal with questionmark
				"‚âó", // \circeq(a)	circle, equals
				"‚âò", // \arceq	arc, equals; corresponds to
				"‚âô", // \wedgeq	corresponds to (wedge, equals)
				"‚âö", // \veeeq	logical or, equals
				"‚âõ", // \stareq	star equals
				"‚©Æ", // \asteq	equals with asterisk
				"‚âú", // \triangleq(a)	triangle, equals
				"‚âû", // \measeq	measured by (m over equals)
				"‚™Æ", // \bumpeqq	equals sign with bumpy above
				"‚©¶", // \eqdot	equals sign with dot below
				"‚©ß", // \dotequiv	identical with dot above

				"‚ãï", // \equalparallel	parallel, equal; equal or parallel
				"‚©®", // \equivVert	triple horizontal bar with double vertical stroke
				"‚©©", // \equivVvert	triple horizontal bar with triple vertical stroke

				"‚ß£", // \eparsl	equals sign and slanted parallel
				"‚ß§", // \smeparsl	equals sign and slanted parallel with tilde above
				"‚ß•", // \eqvparsl	identical to and slanted parallel

				"‚âç", // \asymp(p)	asymptotically equal to
				"‚â≠", // \nasymp	not asymptotically equal to
				"‚âé", // \Bumpeq(a)	bumpy equals
				"‚âè", // \bumpeq(a)	bumpy equals, equals
				"‚âê", // \doteq(l)	equals, single dot above
				"‚âë", // \Doteq(a)	/doteqdot /doteq r: equals, even dots
				"‚âí", // \fallingdotseq(a)	equals, falling dots
				"‚âì", // \risingdotseq(a)	equals, rising dots
				"‚âî", // \coloneq	colon, equals
				"‚©¥", // \Coloneq	double colon equal
				"‚âï", // \eqcolon	equals, colon
				"‚©∑", // \ddotseq	equals sign with two dots above and two dots below

				"‚â£", // \Equiv	strict equivalence (4 lines)
				"‚©∏", // \equivDD	equivalent with four dots above
			]
		},
		{
			name: "Misc Approx",
			symbol: "‚©≠",
			content: [
				"‚ãç", // \backsimeq(a)	reverse similar, equals
				"‚âÖ", // \cong(l)	congruent with
				"‚âÜ", // \simneqq	similar, not equals [vert only for 9573 entity]
				"‚âá", // \ncong(a)	not congruent with
				"‚âå", // \backcong	all equal to
				"‚âÇ", // \eqsim(a)	equals, similar
				"‚âä", // \approxeq(a)	approximate, equals
				"‚âã", // \approxident	approximately identical to
				"‚©¨", // \simminussim	similar minus similar
				"‚©≠", // \congdot	congruent with dot above
				"‚©Ø", // \hatapprox	almost equal to with circumflex accent
				"‚©∞", // \approxeqq	approximately equal or equal to
				"‚©≥", // \eqqsim	equals sign above tilde operator
			]
		},
		{
			name: "Misc Similar",
			symbol: "‚©™",
			content: [
				"‚àª", // \kernelcontraction	homothetic
				"‚©™", // \dotsim	tilde operator with dot above
				"‚©´", // \simrdots	tilde operator with rising dots
				"‚àΩ", // \backsim(a)	reverse similar
			]
		},
		{
			name: "Rel Triangles",
			symbol: "‚™©",
			content: [
				[
					"‚ä≤", // \vartriangleleft(a)	left triangle, open, variant
					"‚ã™", // \nvartriangleleft	not left triangle
				], [
					"‚ä≥", // \vartriangleright(a)	right triangle, open, variant
					"‚ã´", // \nvartriangleright	not right triangle
				],
				[
					"‚ä¥", // \trianglelefteq(a)	left triangle, equals
					"‚ã¨", // \ntrianglelefteq(a)	not left triangle, equals
				], [
					"‚äµ", // \trianglerighteq(a)	right triangle, equals
					"‚ã≠", // \ntrianglerighteq(a)	not right triangle, equals
				],

				"‚ß°", // \lrtriangleeq	increases as
				"‚ßè", // \ltrivb	left triangle beside vertical bar
				"‚ßê", // \vbrtri	vertical bar beside right triangle
				"‚™¶", // \ltcc	less-than closed by curve
				"‚™ß", // \gtcc	greater-than closed by curve
				"‚™®", // \lescc	less-than closed by curve above slanted equal
				"‚™©", // \gescc	greater-than closed by curve above slanted equal

				"‚ßé", // \rtriltri	right triangle above left triangle
			]
		},
		{
			name: "Tacks",
			symbol: "‚ä®",
			content: [
				[
					"‚ä¢", // \vdash(p)	vertical, dash
					"‚ä¨", // \nvdash(a)	not vertical, dash
				],
				"‚ä£", // \dashv(p)	dash, vertical

				"‚ä¶", // \assert	assertion (vertical, short dash)
				"‚´û", // \shortlefttack	short left tack
				"‚´ü", // \shortdowntack	short down tack
				"‚´†", // \shortuptack	short up tack

				"‚üù", // \vlongdash	long left tack
				"‚üû", // \longdashv	long right tack

				"‚äß", // \models(p)	models (vertical, short double dash)
				[
					"‚ä®", // \vDash(a)	vertical, double dash
					"‚ä≠", // \nvDash(a)	not vertical, double dash
				],
				[
					"‚ä©", // \Vdash(a)	double vertical, dash
					"‚äÆ", // \nVdash(a)	not double vertical, dash
				],
				"‚ä™", // \Vvdash(a)	triple vertical, dash
				[
					"‚ä´", // \VDash	double vert, double dash
					"‚äØ", // \nVDash(a)	not double vert, double dash
				],
				"‚üö", // \DashVDash	left and right double turnstile
				"‚üõ", // \dashVdash	left and right tack
				"‚´¢", // \vDdash	vertical bar triple right turnstile
				"‚´£", // \dashV	double vertical bar left turnstile
				"‚´§", // \Dashv	vertical bar double left turnstile
				"‚´•", // \DashV	double vertical bar double left turnstile
				"‚´¶", // \varVdash	long dash from left member of double vertical
				"‚´ß", // \Barv	short down tack with overbar
				"‚´®", // \vBar	short up tack with underbar
				"‚´©", // \vBarv	short up tack above short down tack
				"‚´™", // \barV	double down tack
				"‚´´", // \Vbar	double up tack
				"‚´¨", // \Not	double stroke not sign
				"‚´≠", // \bNot	reversed double stroke not sign
			]
		},
		// Relation Symbols
		[
			"‚â∂", // \lessgtr(a)	less, greater
			"‚â∏", // \nlessgtr	not less, greater
		],
		[
			"<", // \less	less-than sign r:
			"‚âÆ", // \nless(a)	not less-than
		], [
			">", // \greater	greater-than sign r:
			"‚âØ", // \ngtr(a)	not greater-than
		],
		[
			"‚â™", // \ll(p)	much less than, type 2
			"‚™°", // \Lt	double nested less-than
		], [
			"‚â´", // \gg(p)	much greater than, type 2
			"‚™¢", // \Gt	double nested greater-than
		],
		[
			"‚â§", // \leq(p)	/leq /le r: less-than-or-equal
			"‚â∞", // \nleq(a)	not less-than-or-equal
		],
		[
			"‚â•", // \geq(p)	/geq /ge r: greater-than-or-equal
			"‚â±", // \ngeq(a)	not greater-than-or-equal
		],


		[
			"‚â∫", // \prec(p)	precedes
			"‚äÄ", // \nprec(a)	not precedes
		], [
			"‚âª", // \succ(p)	succeeds
			"‚äÅ", // \nsucc(a)	not succeeds
		],
		[
			"‚âº", // \preccurlyeq(a)	precedes, curly equals
			"‚ã†", // \npreccurlyeq	not precedes, curly equals
		], [
			"‚âΩ", // \succcurlyeq(a)	succeeds, curly equals
			"‚ã°", // \nsucccurlyeq	not succeeds, curly equals
		],
		[
			"‚àà", // \in(p)	set membership, variant
			"‚àâ", // \notin(l)	negated set membership
		],
		[
			"‚àã", // \ni(p)	contains, variant
			"‚àå", // \nni	negated contains, variant
		],
		"‚àù", // \propto(p)	is proportional to
		[
			"=", // \equal	equals sign r:
			"‚â†", // \ne(p)	/ne /neq r: not equal
		],
		[
			"‚â°", // \equiv(p)	identical with
			"‚â¢", // \nequiv	not identical with
		],
		[
			"‚àº", // \sim(p)	similar
			"‚âÅ", // \nsim(a)	not similar
		],
		[
			"‚âÉ", // \simeq(p) \sime	similar, equals
			"‚âÑ", // \nsime \nsimeq	not similar, equals
		],
		[
			"‚âà", // \approx(p)	approximate
			"‚ââ", // \napprox	not approximate
		],
		[
			"‚äÇ", // \subset(p)	subset or is implied by
			"‚äÑ", // \nsubset	not subset, variant [slash negation]
		], [
			"‚äÉ", // \supset(p)	superset or implies
			"‚äÖ", // \nsupset	not superset, variant [slash negation]
		],
		[
			"‚äÜ", // \subseteq(p)	subset, equals
			"‚äà", // \nsubseteq(a)	not subset, equals
		],
		[
			"‚äá", // \supseteq(p)	superset, equals
			"‚äâ", // \nsupseteq(a)	not superset, equals
		],
		[
			"‚ãà", // \bowtie(p)	bowtie
			"‚ßì", // \fbowtie	black bowtie
		], [
			"‚ßî", // \lftimes	left black times
			"‚ßë", // \lfbowtie	left black bowtie
		], [
			"‚ßí", // \rfbowtie	right black bowtie
			"‚ßï", // \rftimes	right black times
		],
		"‚ãÆ", // \vdots(p)	vertical ellipsis
		"‚ã∞", // \adots	three dots, ascending
		"‚ã±", // \ddots(p)	three dots, descending

		"‚â¨", // \between(a)	between
		"‚Åê", // \closure	close up
		"‚å¢", // \frown(p)	down curve
		"‚å£", // \smile(p)	up curve

		"‚åø", // \APLnotslash	solidus, bar through (apl functional symbol slash bar)
		"‚ñµ", // \vartriangle(a)	/triangle - up triangle, open
		"‚üÇ", // \perp(p)	perpendicular
		"‚´°", // \perps	perpendicular with s
		"‚üì", // \pullback	lower right corner with dot
		"‚üî", // \pushout	upper left corner with dot

		"‚ßü", // \dualmap	double-ended multimap
		"‚ä∂", // \origof	original of
		"‚ä∑", // \imageof	image of
		"‚ä∏", // \multimap(a)	/multimap a:
		"‚´Ø", // \cirmid	vertical line with circle above
		"‚´∞", // \midcir	vertical line with circle below
		"‚üú", // \multimapinv	left multimap
		"‚üü", // \cirbot	up tack with circle above

		"‚•æ", // \upfishtail	up fish tail
		"‚•ø", // \downfishtail	down fish tail
		"‚¶Ç", // \typecolon	z notation type colon

		"‚à∂", // \mathratio	ratio
		"‚à∑", // \Colon	two colons
		"‚àπ", // \dashcolon	excess (-:)
		"‚à∫", // \dotsminusdots	minus with four dots, geometric properties
		"‚ß¥", // \ruledelayed	rule-delayed

		"‚©ô", // \veeonwedge	logical or overlapping logical and

		[
			"‚à£", // \mid(p)	/mid r:
			"‚à§", // \nmid(a)	negated mid
		], [
			"‚à•", // \parallel(p)	parallel
			"‚à¶", // \nparallel(a)	not parallel
		],
		"‚´Æ", // \revnmid	does not divide with reversed negation slash
		"‚´≤", // \nhpar	parallel with horizontal stroke
		"‚´≥", // \parsim	parallel with tilde operator
	]
}

const MathUTN28 = {
	name: "UTN 28",
	symbol: "‚ñà",
	content: [
		// enclosing
		"‚ñ†", // \matrix
		"‚ñà", // \eqarray
		"‚ñ°", // \box
		"‚ñ≠", // \rect
		"¬Ø", // \overbar
		"‚ñÅ", // \underbar

		// special
		"‚Ñ≤", // Size Override

		// accents-operators

		// phantom-smashes
		"‚ü°", // \phantom
		"‚¨Ñ", // \hphantom
		"‚á≥", // \vphantom
		"‚¨ç", // \smash
		"‚¨Ü", // \asmash
		"‚¨á", // \dsmash
		"‚¨å", // \hsmash
	]
};
export const MathKeyboard: EmojiKeyboard = {
	name: "Math",
	symbol: "‚àõ",
	content: [
		MathGroups,
		MathOverUnder,
		MathAccents,
		MathNAry,
		MathBinary,
		MathSymbols,
		MathShapes,
		MathRelations,
		MathUTN28,
		LatinBold,
		LatinItalic,
		LatinBoldItalic,
		LatinSans,
		LatinSansBold,
		LatinSansItalic,
		LatinSansBoldItalic,
		LatinScript,
		LatinScriptBold,
		LatinFraktur,
		LatinFrakturBold,
		LatinMono,
		LatinDoubleStruck,
		GreekBold,
		GreekItalic,
		GreekBoldItalic,
		GreekSansBold,
		GreekSansBoldItalic,
	],
};

const Suits = [
	[
		"‚ô†", // \spadesuit(p)	spades suit symbol
		"‚ô§", // \varspadesuit	spade, white (card suit)
	],
	[
		"‚ô°", // \heartsuit(p)	heart suit symbol
		"‚ô•", // \varheartsuit	filled heart (card suit)
	],
	[
		"‚ô¢", // \diamondsuit(p)	diamond suit symbol
		"‚ô¶", // \vardiamondsuit	filled diamond (card suit)
	],
	[
		"‚ô£", // \clubsuit(p)	club suit symbol
		"‚ôß", // \varclubsuit	club, white (card suit)
	],
];
const Dices = [
	"‚öÄ", // \dicei	die face-1
	"‚öÅ", // \diceii	die face-2
	"‚öÇ", // \diceiii	die face-3
	"‚öÉ", // \diceiv	die face-4
	"‚öÑ", // \dicev	die face-5
	"‚öÖ", // \dicevi	die face-6
];
const MusicSymbols = [
	"‚ô©", // \quarternote	music note (sung text sign)
	"‚ô™", // \eighthnote	eighth note
	"‚ô´", // \twonotes	beamed eighth notes
	"‚ô≠", // \flat(p)	musical flat
	"‚ôÆ", // \natural(p)	music natural
	"‚ôØ", // \sharp(p)	musical sharp
]
const GenderSymbols = [
	"‚ôÄ", // \female	venus, female
	"‚ôÇ", // \male	mars, male
	"‚ö•", // \Hermaphrodite	male and female sign
	"‚ö≤", // \neuter	neuter
];
const MiscSymbols = [
	"‚óâ", // \fisheye	fisheye
	"‚óò", // \inversebullet	inverse bullet
	"‚óú", // \ularc	upper left quadrant circular arc
	"‚óù", // \urarc	upper right quadrant circular arc
	"‚óû", // \lrarc	lower right quadrant circular arc
	"‚óü", // \llarc	lower left quadrant circular arc
	"‚òÖ", // \bigstar(a)	star, filled
	"‚òÜ", // \bigwhitestar	star, open
	"‚òâ", // \astrosun	sun
	"‚ò°", // \danger	dangerous bend (caution sign)
	"‚òª", // \blacksmiley	black smiling face
	"‚òº", // \sun	white sun with rays
	"‚òΩ", // \rightmoon	first quarter moon
	"‚òæ", // \leftmoon	last quarter moon
	"‚úì", // \checkmark	tick, check mark
	"‚ú†", // \maltese	maltese cross
	"‚ú™", // \circledstar	circled white star
	"‚ú∂", // \varstar	six pointed black star
	"‚úΩ", // \dingasterisk	heavy teardrop-spoked asterisk
	"‚ûõ", // \draftingarrow	right arrow with bold head (drafting)
	"‚§´", // \rdiagovfdiag	rising diagonal crossing falling diagonal
	"‚§¨", // \fdiagovrdiag	falling diagonal crossing rising diagonal
	"‚¶ô", // \fourvdots	dotted fence
	"‚¶ö", // \vzigzag	vertical zigzag line
	"‚¶∫", // \obot	circle divided by horizontal bar and top half divided by vertical bar
	"‚ßâ", // \boxonbox	two joined squares
	"‚ß†", // \laplac	square with contoured outline
	"‚ßß", // \thermod	thermodynamicblack
	"‚ßÆ", // \errbarsquare	error-barred white square
	"‚ßØ", // \errbarblacksquare	error-barred black square
	"‚´±", // \topcir	down tack with circle below
	"‚≠ê", // \medwhitestar	white medium star
	"‚≠ë", // \medblackstar	black medium star
	"‚≠í", // \smwhitestar	white small star
	"„Äí", // \postalmark	postal mark
	"„Ä∞", // \hzigzag	zigzag
];

const Parts = [
	"‚éõ", // \lparenuend	left parenthesis upper hook
	"‚éú", // \lparenextender	left parenthesis extension
	"‚éù", // \lparenlend	left parenthesis lower hook
	"‚é°", // \lbrackuend	left square bracket upper corner
	"‚é¢", // \lbrackextender	left square bracket extension
	"‚é£", // \lbracklend	left square bracket lower corner
	"‚éß", // \lbraceuend	left curly bracket upper hook
	"‚é®", // \lbracemid	left curly bracket middle piece
	"‚é™", // \vbraceextender	curly bracket extension
	"‚é©", // \lbracelend	left curly bracket lower hook

	"‚éû", // \rparenuend	right parenthesis upper hook
	"‚éü", // \rparenextender	right parenthesis extension
	"‚é†", // \rparenlend	right parenthesis lower hook
	"‚é§", // \rbrackuend	right square bracket upper corner
	"‚é•", // \rbrackextender	right square bracket extension
	"‚é¶", // \rbracklend	right square bracket lower corner
	"‚é´", // \rbraceuend	right curly bracket upper hook
	"‚é¨", // \rbracemid	right curly bracket middle piece
	"‚é™", // \vbraceextender	curly bracket extension
	"‚é≠", // \rbracelend	right curly bracket lower hook

	"‚é≤", // \sumtop	summation top
	"‚é≥", // \sumbottom	summation bottom

	"‚å†", // \inttop	top half integral
	"‚éÆ", // \intextender	integral extension
	"‚å°", // \intbottom	bottom half integral

	"‚é∑", // \sqrtbottom	radical symbol bottom
];
