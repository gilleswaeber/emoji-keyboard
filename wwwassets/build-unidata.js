import {nodeBuild} from "./dist/emoji-keyboard.js";
import {promises as fs} from "fs";

const ahk_file = await fs.readFile("../App.ahk", 'utf8');
const ucdVersion = /\nUCD_VERSION := "([^"]+)"[\r\n]/.exec(ahk_file)[1];
const emojiVersion = /\nEMOJI_VERSION := "([^"]+)"[\r\n]/.exec(ahk_file)[1];
const cldrVersion = /\nCLDR_VERSION := "([^"]+)"[\r\n]/.exec(ahk_file)[1];

console.log("Building unidata using");
console.log("  UCD:", ucdVersion);
console.log("  EMOJI:", emojiVersion);
console.log("  CLDR:", cldrVersion);

const u = await nodeBuild({ucdVersion, emojiVersion, cldrVersion});
const emojiCount = u.groups.map(g => g.sub.reduce((v, s) => v + (s.clusters?.length ?? 0), 0)).reduce((a, b) => a + b, 0);
console.log(
	`Finished building “${u.name}”\n` +
	` – ${u.chars.length} codepoints in ${u.blocks.length} blocks\n` +
	` – ${u.clusters.length} grapheme clusters with length > 1\n` +
	` – ${u.groups.length} emoji groups with ${emojiCount} base emojis\n\n`
)

await fs.mkdir("data", {recursive: true});
await fs.writeFile("data/unidata.js", `// This file is generated by the builder script. Do not edit.
// To rebuild, click Settings > Tools > Build in the app or run 'npm run build-unidata' in the wwwassets folder
var unicodeData = ${JSON.stringify(u, null, 2)}`, 'utf8');

await fs.writeFile("script/unidata.tmp.d.ts", `// This file is generated by the builder script. Do not edit.
// To rebuild, click Settings > Tools > Build in the app or run 'npm run build-unidata' in the wwwassets folder
export type UnicodeEmojiGroup =
	${u.groups.flatMap(g => g.sub.flatMap(s => `{group: ${JSON.stringify(g.name)}, subGroup: ${JSON.stringify(s.name)}}`
)).join('\n\t| ')};
`, 'utf8');
